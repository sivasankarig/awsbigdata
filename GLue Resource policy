aws glue put-resource-policy --policy-in-json '{
  "Version" : "2012-10-17",
  "Statement" : [ {
    "Sid" : "Cataloguers",
    "Effect" : "Allow",
    "Principal" : {
      "AWS" : ["arn:aws:iam::209:root","arn:aws:iam::<consumeraccid>2224:root"]
    },
    "Action" : "glue:*",
    "Resource" : [ "arn:aws:glue:us-east-1:<resrc_owner_accid>:catalog", "arn:aws:glue:us-east-1:<resrc_owner_accid>:database/*", "arn:aws:glue:us-east-1:<resrc_owner_accid>:table/*/*" ]
  } ]
}'  --profile acc6975 --enable-hybrid 'TRUE'

From <consumeraccid>2224: aws glue get-databases --catalog-id <resrc_owner_accid> --query 'DatabaseList[*].Name'

import boto3
sts_client = boto3.client('sts')
credentials=assumed_role_object['Credentials']
assumed_role_object=sts_client.assume_role(
    RoleArn="arn:aws:iam::xxxxxxxxx29:role/RoleV2",
    RoleSessionName="AssumeRoleSession1"
)
new_session = boto3.Session(aws_access_key_id=assumed_role_object['Credentials']['AccessKeyId'],
                      aws_secret_access_key=assumed_role_object['Credentials']['SecretAccessKey'],
                      aws_session_token=assumed_role_object['Credentials']['SessionToken'])


glue = new_session.client('glue')
paginator = glue.get_paginator('get_tables')
page_iterator = paginator.paginate(
    DatabaseName='api5afs_dev',
    CatalogId=''
)

for page in page_iterator:
    print(page['TableList'])
    
=============================================================    
import boto3
sts_client = boto3.client('sts')

# assumed_role_object=sts_client.assume_role(
#     RoleArn="arn:aws:iam::297970952224:root",
#     RoleSessionName="AssumeRoleSession1"
# )
new_session = boto3.Session()


glue = new_session.client('glue')
paginator = glue.get_paginator('get_tables')
page_iterator = paginator.paginate(
    DatabaseName='firehosedb',
    CatalogId='697595720409'
)

for page in page_iterator:
    print(page['TableList'])
    
    
    ----------------------------------------
    https://boto3.amazonaws.com/v1/documentation/api/latest/guide/paginators.html
    Some AWS operations return results that are incomplete and require subsequent requests in order to attain the entire result set. The process of sending subsequent requests to continue where a previous request left off is called pagination. For example, the list_objects operation of Amazon S3 returns up to 1000 objects at a time, and you must send subsequent requests with the appropriate Marker in order to retrieve the next page of results.

Paginators are a feature of boto3 that act as an abstraction over the process of iterating over an entire result set of a truncated API operation.
